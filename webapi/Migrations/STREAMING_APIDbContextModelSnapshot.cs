// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Streaming_API.Data;

#nullable disable

namespace Streaming_API.Migrations
{
    [DbContext(typeof(STREAMING_APIDbContext))]
    partial class STREAMING_APIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("Streaming_API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "f03cd5c8-f389-4292-afa5-ba79178b4cfc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f0b8b59-6a94-45da-ad60-bab856b985e4",
                            Email = "JohnDoe123@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PasswordHash = "F9A1A872876AADC58149C885DEA4189F2D6A4ACF5063D4BAE254670E2083B02BEACFE490648027E25CB9002E4430B7ECB81CA0810CC18BBF5CDF3058A199C862",
                            PasswordSalt = "954AFCE7D1D01B6A0C45C30A2B6B15A1DBF500A41B1EF53D175FABF465D9AEC78F50003431DF3708537E248BA9FA1300476E52D17269CA6F5E710A8FF9353DDA",
                            PhoneNumberConfirmed = false,
                            RoleId = 1,
                            SecurityStamp = "9bf6d0a0-01fb-439f-9c7b-8c9708f18c6a",
                            TwoFactorEnabled = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = "fc5c9e6f-9ceb-44be-b7b0-93d2e0b4190b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fdeb6cc-f519-44da-aa21-e7914b70a56e",
                            Email = "TylerMoore456@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tyler",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            PasswordHash = "6FED35E35437DC028EDD21AD1A7AEE340720EB68CBA8E4195C5A0C1FC9589E09DBAA9691B6A86BAA6C0DE60D297F6784FEDB973E8A5D695B7E46D912467D201F",
                            PasswordSalt = "66D6CA0B05A8C7BF7FDF4D4BD7ECF2346E95FF42B0801C0B6570E3E3203A5DFA736355B61CB7F35D0785E2529611DDF01DAD004C979D12EC77A2C7A8D1D94B5A",
                            PhoneNumberConfirmed = false,
                            RoleId = 2,
                            SecurityStamp = "910a521d-4ce7-435b-b380-3dc1787a4906",
                            TwoFactorEnabled = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Streaming_API.Models.Broadcaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Broadcasters");
                });

            modelBuilder.Entity("Streaming_API.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("Streaming_API.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BroadcasterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BroadcasterId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Streaming_API.Models.ApplicationUser", b =>
                {
                    b.HasOne("Streaming_API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Streaming_API.Models.Video", b =>
                {
                    b.HasOne("Streaming_API.Models.Broadcaster", "Broadcaster")
                        .WithMany("Videos")
                        .HasForeignKey("BroadcasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broadcaster");
                });

            modelBuilder.Entity("Streaming_API.Models.Broadcaster", b =>
                {
                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
